(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{282:function(v,a,t){v.exports=t.p+"assets/img/image-20220822142637567.55e5f925.png"},283:function(v,a,t){v.exports=t.p+"assets/img/image-20220822142712074.1a0c8c8b.png"},306:function(v,a,t){"use strict";t.r(a);var _=t(14),i=Object(_.a)({},(function(){var v=this,a=v._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h1",{attrs:{id:"java常用api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java常用api"}},[v._v("#")]),v._v(" Java常用API")]),v._v(" "),a("h3",{attrs:{id:"object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object"}},[v._v("#")]),v._v(" Object")]),v._v(" "),a("ol",[a("li",[v._v("Object 是java中的顶级父类")]),v._v(" "),a("li",[v._v("toString(): 一般会被重写,打印对象时打印属性")]),v._v(" "),a("li",[v._v("equals():比较对象,同样一般会重写,比较对象属性值是否相同")]),v._v(" "),a("li",[v._v("clone(): 克隆,默认浅克隆,使用需要重写方法.如果需要深克隆需要再次重写方法或者使用第三方工具类. gy")])]),v._v(" "),a("h3",{attrs:{id:"objects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#objects"}},[v._v("#")]),v._v(" Objects")]),v._v(" "),a("ol",[a("li",[v._v("objects是一个对象工具类,提供一些操作对象的方法")]),v._v(" "),a("li",[v._v("equals(对象1,对象2):先做非空判断,再比较两个对象")]),v._v(" "),a("li",[v._v("isNull(对象):判断对象是否为空")]),v._v(" "),a("li",[v._v("noNull(对象):判断对象是否不是空,与前者相反")])]),v._v(" "),a("h3",{attrs:{id:"biginteger"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#biginteger"}},[v._v("#")]),v._v(" BigInteger")]),v._v(" "),a("ol",[a("li",[v._v("表示一个大整数")]),v._v(" "),a("li",[v._v("如果数字没有超过long的范围,可以使用静态方法获取")]),v._v(" "),a("li",[v._v("如果超出范围,就用构造方法获取")]),v._v(" "),a("li",[v._v("对象一旦创建,内部记录的值将不能发生改变")]),v._v(" "),a("li",[v._v("只要进行计算,都会产生一个新的BigInteger对象")]),v._v(" "),a("li",[v._v("加减乘除 比较 次幂 转成整数")])]),v._v(" "),a("h3",{attrs:{id:"bigdecimal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bigdecimal"}},[v._v("#")]),v._v(" BigDecimal")]),v._v(" "),a("ol",[a("li",[v._v("表示较大的小数和小数运算失真的问题")]),v._v(" "),a("li",[v._v("超过double类型,使用新建对象,没有超出就使用valueof()方法")]),v._v(" "),a("li",[v._v("加减乘除(四舍五入: RoundingMode.HALF_UP)")])]),v._v(" "),a("h3",{attrs:{id:"regex-正则表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regex-正则表达式"}},[v._v("#")]),v._v(" Regex 正则表达式")]),v._v(" "),a("ol",[a("li",[a("p",[v._v("校验字符串是否满足规则")])]),v._v(" "),a("li",[a("p",[v._v("在一段文本中查找满足要求的内容")])]),v._v(" "),a("li",[a("p",[a("img",{attrs:{src:t(282),alt:"image-20220822142637567"}})])])]),v._v(" "),a("p",[a("img",{attrs:{src:t(283),alt:"image-20220822142712074"}})]),v._v(" "),a("h3",{attrs:{id:"simpledateformat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#simpledateformat"}},[v._v("#")]),v._v(" SimpleDateFormat")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("y年")])]),v._v(" "),a("li",[a("p",[v._v("M月")])]),v._v(" "),a("li",[a("p",[v._v("d日")])]),v._v(" "),a("li",[a("p",[v._v("H时")])]),v._v(" "),a("li",[a("p",[v._v("m分")])]),v._v(" "),a("li",[a("p",[v._v("s秒")])])]),v._v(" "),a("ol",[a("li",[a("p",[v._v("format(Date) 格式化")])]),v._v(" "),a("li",[a("p",[v._v("parse(String) 解析")])])]),v._v(" "),a("h3",{attrs:{id:"calendar"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#calendar"}},[v._v("#")]),v._v(" Calendar")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("一个抽象类")])]),v._v(" "),a("li",[a("p",[v._v("根据不同时区获取不同的日历对象,不能通过new获取,而是通过static修饰的方法getInstance获取")])]),v._v(" "),a("li",[a("p",[v._v("默认表示当前时间")])]),v._v(" "),a("li",[a("p",[v._v("月份从0开始")])]),v._v(" "),a("li",[a("p",[v._v("星期日是一周的开始(老外设置的)")])]),v._v(" "),a("li",[a("p",[v._v("把年月日等放到数组当中(原理)")])]),v._v(" "),a("li",[a("p",[v._v("数组索引对应")]),v._v(" "),a("ol",{attrs:{start:"0"}},[a("li",[a("p",[v._v("纪元")])]),v._v(" "),a("li",[a("p",[v._v("年")])]),v._v(" "),a("li",[a("p",[v._v("月")])]),v._v(" "),a("li",[a("p",[v._v("一年中的第几周")])]),v._v(" "),a("li",[a("p",[v._v("一个月中的第几周")])]),v._v(" "),a("li",[a("p",[v._v("一个月中第几天(多少号)")]),v._v(" "),a("p",[v._v("...........")])])])])])])}),[],!1,null,null,null);a.default=i.exports}}]);