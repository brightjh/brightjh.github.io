(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{296:function(e,n,t){"use strict";t.r(n);var a=t(14),r=Object(a.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"spring-让new更优雅"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-让new更优雅"}},[e._v("#")]),e._v(" Spring-让new更优雅")]),e._v(" "),n("blockquote",[n("p",[e._v("Spring 是一个开源的应用程序开发框架，它提供了一个轻量级的容器，用于管理和组织对象的创建、依赖注入和生命周期管理。通过使用 Spring 的依赖注入机制，我们可以将对象的创建和依赖关系的管理交给 Spring 容器来处理，从而减少了对 "),n("code",[e._v("new")]),e._v(" 关键字的使用。")])]),e._v(" "),n("p",[e._v("在之前的 Java 开发中，我们经常使用 "),n("code",[e._v("new")]),e._v(" 关键字来创建对象实例。在大型应用中，频繁地使用 "),n("code",[e._v("new")]),e._v(" 可能会导致代码变得冗长、复杂，并且难以维护。然而，使用 Spring 框架可以使我们的代码更加优雅，减少对 "),n("code",[e._v("new")]),e._v(" 的直接依赖。")]),e._v(" "),n("p",[e._v("那么 Spring 让 "),n("code",[e._v("new")]),e._v(" 更优雅的“底层原理”是什么")]),e._v(" "),n("h2",{attrs:{id:"依赖注入-dependency-injection"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#依赖注入-dependency-injection"}},[e._v("#")]),e._v(" 依赖注入（Dependency Injection）")]),e._v(" "),n("p",[e._v("Spring 提供了依赖注入的功能，通过在类中声明依赖关系，Spring 容器会负责在运行时自动将依赖的对象注入到类中，而无需显式使用 "),n("code",[e._v("new")]),e._v(" 来创建对象。这样可以实现松耦合和可测试性，使代码更加灵活和易于维护。")]),e._v(" "),n("h2",{attrs:{id:"配置文件管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置文件管理"}},[e._v("#")]),e._v(" 配置文件管理")]),e._v(" "),n("p",[e._v("Spring 使用配置文件来管理对象的创建和依赖关系。我们可以使用 XML 配置文件、注解或者 Java 配置类来描述对象的创建和属性的设置，从而实现对象的自动化创建和组装。这种方式避免了在代码中显式使用 "),n("code",[e._v("new")]),e._v(" 关键字来创建对象，使代码更加简洁和可读性更高。")]),e._v(" "),n("h2",{attrs:{id:"单例模式管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单例模式管理"}},[e._v("#")]),e._v(" 单例模式管理")]),e._v(" "),n("p",[e._v("Spring 默认将对象作为单例进行管理，即在整个应用程序中只创建一个对象实例，并通过依赖注入将该实例注入到需要的地方。这样可以减少资源的消耗和对象的创建时间，并且确保对象的状态一致性。")]),e._v(" "),n("h2",{attrs:{id:"aop-支持"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#aop-支持"}},[e._v("#")]),e._v(" AOP 支持")]),e._v(" "),n("p",[e._v("Spring 提供了面向切面编程（AOP）的支持，通过动态代理的方式，可以在不修改原始代码的情况下，对方法进行拦截和增强。例如，可以通过 AOP 将事务管理应用到方法上，从而实现事务的自动提交和回滚。这样可以减少手动管理事务的工作量，提高代码的可维护性。")])])}),[],!1,null,null,null);n.default=r.exports}}]);