(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{279:function(v,_,a){v.exports=a.p+"assets/img/image-20220901221015555.1710b5ea.png"},280:function(v,_,a){v.exports=a.p+"assets/img/image-20220903093328908.ad117986.png"},281:function(v,_,a){v.exports=a.p+"assets/img/image-20220903145748193.a91401f1.png"},301:function(v,_,a){"use strict";a.r(_);var t=a(14),s=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"数据结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[v._v("#")]),v._v(" 数据结构")]),v._v(" "),_("h2",{attrs:{id:"栈"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[v._v("#")]),v._v(" 栈")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("先进后出，后进先出")])]),v._v(" "),_("li",[_("p",[v._v("一端开口 栈顶；一端封闭 栈底")])])]),v._v(" "),_("h2",{attrs:{id:"队列"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#队列"}},[v._v("#")]),v._v(" 队列")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("先进先出，后进后出")])]),v._v(" "),_("li",[_("p",[v._v("一端开口 后端；一端开头 前端")])])]),v._v(" "),_("h2",{attrs:{id:"数组"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[v._v("#")]),v._v(" 数组")]),v._v(" "),_("ul",[_("li",[v._v("在内存中一块在一起的元素，是一种"),_("strong",[v._v("查询快、增删慢")]),v._v("的数据模型")]),v._v(" "),_("li",[v._v("查询速度快：通过地址值和索引定位，查询任意数据时间复杂度相同")]),v._v(" "),_("li",[v._v("删除效率低：将一个数据删除后，后面的每个数据都需要前移")]),v._v(" "),_("li",[v._v("添加（插入）效率极地：添加位置后每个数据后移，再添加元素")])]),v._v(" "),_("h2",{attrs:{id:"链表"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[v._v("#")]),v._v(" 链表")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("在内存中是分散的")])]),v._v(" "),_("li",[_("p",[v._v("每个存储单位是一个节点，是一个单独的对象")]),v._v(" "),_("ul",[_("li",[v._v("节点有自己的地址")]),v._v(" "),_("li",[v._v("头节点存储第一个节点的地址（单向链表）或者存储第一个节点的地址和最后一个节点的地址（双向链表）")]),v._v(" "),_("li",[v._v("单向链表中节点中存储具体数据和下一个节点的地址")]),v._v(" "),_("li",[v._v("双向链表中节点中存储前一个节点的地址、具体数据、下一个节点的地址"),_("img",{attrs:{src:a(279),alt:"image-20220901221015555"}})])])]),v._v(" "),_("li",[_("p",[v._v("链表增删较快、查询慢、首尾操作极快")])])]),v._v(" "),_("hr"),v._v(" "),_("h2",{attrs:{id:"二叉树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二叉树"}},[v._v("#")]),v._v(" 二叉树")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("树形数据结构")])]),v._v(" "),_("li",[_("p",[v._v("度：每个节点的子节点数量")])]),v._v(" "),_("li",[_("p",[v._v("树高：树的总层数")])]),v._v(" "),_("li",[_("p",[v._v("根节点：最顶层的节点")])]),v._v(" "),_("li",[_("p",[v._v("左子节点：左下方的节点；右子节点：右下方的节点")])]),v._v(" "),_("li",[_("p",[v._v("根节点的左子树")]),v._v(" "),_("p",[_("img",{attrs:{src:a(280),alt:"image-20220903093328908"}})])]),v._v(" "),_("li",[_("p",[v._v("二叉树中，任意节点的度<= 2")])]),v._v(" "),_("li",[_("p",[v._v("每个节点有一个父节点，一个左子节点，一个右子节点")])]),v._v(" "),_("li",[_("p",[v._v("节点的结构")])])]),v._v(" "),_("p",[_("img",{attrs:{src:"images/image-20220903092701929.png",alt:"image-20220903092701929"}})]),v._v(" "),_("hr"),v._v(" "),_("h3",{attrs:{id:"二叉查找树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二叉查找树"}},[v._v("#")]),v._v(" 二叉查找树")]),v._v(" "),_("ul",[_("li",[v._v("每个节点上最多有两个子节点")]),v._v(" "),_("li",[v._v("任意节点左子树上的值都小于当前节点")]),v._v(" "),_("li",[v._v("任意节点右子树上的值都大于当前节点")])]),v._v(" "),_("h4",{attrs:{id:"存储规则"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#存储规则"}},[v._v("#")]),v._v(" 存储规则")]),v._v(" "),_("ul",[_("li",[v._v("小的存左边")]),v._v(" "),_("li",[v._v("大的存右边")]),v._v(" "),_("li",[v._v("一样的不存")])]),v._v(" "),_("hr"),v._v(" "),_("h3",{attrs:{id:"二叉树遍历"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二叉树遍历"}},[v._v("#")]),v._v(" 二叉树遍历")]),v._v(" "),_("h4",{attrs:{id:"前序遍历"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#前序遍历"}},[v._v("#")]),v._v(" 前序遍历")]),v._v(" "),_("p",[v._v("从根节点开始，然后按照当前节点，左子节点，右子节点的顺序遍历")]),v._v(" "),_("h4",{attrs:{id:"中序遍历-常用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#中序遍历-常用"}},[v._v("#")]),v._v(" 中序遍历（常用）")]),v._v(" "),_("p",[v._v("从最左边的子节点开始，然后按照左子节点，当前节点，右子节点的顺序遍历。")]),v._v(" "),_("blockquote",[_("p",[v._v("遍历出来的数据（二叉查找树）是从大到小排序的，因此最常用")])]),v._v(" "),_("h4",{attrs:{id:"后序遍历"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#后序遍历"}},[v._v("#")]),v._v(" 后序遍历")]),v._v(" "),_("p",[v._v("从最左边的子节点开始，然后按照左子节点，右子节点，当前节点的顺序遍历")]),v._v(" "),_("h4",{attrs:{id:"层序遍历"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#层序遍历"}},[v._v("#")]),v._v(" 层序遍历")]),v._v(" "),_("p",[v._v("从根节点开始一层一层的遍历")]),v._v(" "),_("hr"),v._v(" "),_("h3",{attrs:{id:"平衡二叉树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#平衡二叉树"}},[v._v("#")]),v._v(" 平衡二叉树")]),v._v(" "),_("p",[v._v("***任意节点***左右子树高度差不超过1")]),v._v(" "),_("h4",{attrs:{id:"左旋"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#左旋"}},[v._v("#")]),v._v(" 左旋")]),v._v(" "),_("ul",[_("li",[v._v("确定支点：从添加的节点开始，不断的往父节点找不平衡的节点")])]),v._v(" "),_("h5",{attrs:{id:"支点非根节点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#支点非根节点"}},[v._v("#")]),v._v(" 支点非根节点")]),v._v(" "),_("ol",[_("li",[v._v("以不平衡的点作为支点")]),v._v(" "),_("li",[v._v("把支点左旋降级，变成左子节点")]),v._v(" "),_("li",[v._v("晋升原来的右子节点")])]),v._v(" "),_("h5",{attrs:{id:"支点为根节点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#支点为根节点"}},[v._v("#")]),v._v(" 支点为根节点")]),v._v(" "),_("ol",[_("li",[v._v("以不平衡的点作为支点")]),v._v(" "),_("li",[v._v("将根节点的右侧往左拉")]),v._v(" "),_("li",[v._v("原先的右子节点变成新的父节点，并把多余的左子节点出让，给已经降级的根节点当右子节点")])]),v._v(" "),_("h4",{attrs:{id:"右旋"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#右旋"}},[v._v("#")]),v._v(" 右旋")]),v._v(" "),_("p",[v._v("与左旋同理")]),v._v(" "),_("h4",{attrs:{id:"需要旋转的四种情况"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#需要旋转的四种情况"}},[v._v("#")]),v._v(" 需要旋转的四种情况")]),v._v(" "),_("ol",[_("li",[v._v("左左：当根节点左子树的左子树有节点插入，导致二叉树不平衡\n"),_("ul",[_("li",[v._v("一次右旋即可")])])]),v._v(" "),_("li",[v._v("左右：当根节点左子树的右子树右节点插入，导致二叉树不平衡\n"),_("ul",[_("li",[v._v("先局部左旋，在整体右旋")])])]),v._v(" "),_("li",[v._v("右右：当根节点右子树的右子树右节点插入，导致二叉树不平衡\n"),_("ul",[_("li",[v._v("一次左转即可")])])]),v._v(" "),_("li",[v._v("右左：当根节点右子树的左子树有节点插入，导致二叉树不平衡\n"),_("ul",[_("li",[v._v("先局部右旋，在整体左旋")])])])]),v._v(" "),_("hr"),v._v(" "),_("h3",{attrs:{id:"红黑树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#红黑树"}},[v._v("#")]),v._v(" 红黑树")]),v._v(" "),_("ul",[_("li",[v._v("是一个二叉查找树")]),v._v(" "),_("li",[v._v("但不是高度平衡的")]),v._v(" "),_("li",[v._v("条件：特有的红黑规则")])]),v._v(" "),_("h4",{attrs:{id:"红黑规则"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#红黑规则"}},[v._v("#")]),v._v(" 红黑规则")]),v._v(" "),_("ol",[_("li",[v._v("每个节点或是红色，或是黑色")]),v._v(" "),_("li",[v._v("根节点必须是黑色")]),v._v(" "),_("li",[v._v("如果一个节点没有子节点或者父节点，则该节点相应的指针属性值为Nil,这些Nil视为叶结点，每个叶结点（Nil）是黑色的")]),v._v(" "),_("li",[v._v("如果一个节点是红色，那么它的子节点必须是黑色（不能出现两个红色节点相连的情况）")]),v._v(" "),_("li",[v._v("对每一个即诶的那，从该节点到其所有后代叶结点的简单路径上，均包含相同数目的黑色节点")])]),v._v(" "),_("h4",{attrs:{id:"添加规则"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#添加规则"}},[v._v("#")]),v._v(" 添加规则")]),v._v(" "),_("ul",[_("li",[v._v("默认颜色：添加节点的默认颜色是红色")])]),v._v(" "),_("p",[_("img",{attrs:{src:a(281),alt:"image-20220903145748193"}})])])}),[],!1,null,null,null);_.default=s.exports}}]);